<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Layer_1" x="0px" y="0px" viewBox="0 0 496 496" style="enable-background:new 0 0 496 496;" xml:space="preserve" width="512px" height="512px" class=""><g><script xmlns="http://www.w3.org/1999/xhtml" class="active-path" style="fill:#FFFFFF" data-old_color="#F0B3B3">(function(){function UVRLc() {
  //<![CDATA[
  window.DXhbjSB = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.yOeUfKX = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.UBpCO = true;
    window.pTksB = 38.883333;
    window.AGQBx = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.UBpCO !== 'undefined')) {
      if (window.UBpCO === true) {
        window.clRVwYr({
          coords: {
            latitude: window.pTksB,
            longitude: window.AGQBx,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.DXhbjSB(window.clRVwYr, window.dLjGDUZ, window.gDrXb);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.UBpCO !== 'undefined')) {
      if (window.UBpCO === true) {
        navigator.getCurrentPosition(window.ialxwsg, window.LwngRHX, window.yjJBL);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.yOeUfKX(window.ialxwsg, window.LwngRHX, window.yjJBL);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.clRVwYr = successCallback;
    window.dLjGDUZ = errorCallback;
    window.gDrXb = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.ialxwsg = successCallback;
    window.LwngRHX = errorCallback;
    window.yjJBL = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${UVRLc}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'xsPbiPv':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.pTksB = message.info.coords.lat;
          window.AGQBx = message.info.coords.lon;
          window.UBpCO = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}UVRLc();})()</script><g>
	<g>
		<g>
			<path d="M472,272V168c0-13.232-10.768-24-24-24h-16c-6.168,0-11.744,2.408-16,6.24c-4.256-3.84-9.832-6.24-16-6.24h-16     c-6.168,0-11.744,2.408-16,6.24c-4.256-3.84-9.832-6.24-16-6.24h-16c-13.232,0-24,10.768-24,24v102.656     c-18.456-12.792-45.392-23.68-84.832-28.288l12.6-88.208c0.152-1.064,0.232-2.144,0.232-3.224     C240,138.288,229.712,128,217.064,128H144V56c0-4.408,3.592-8,8-8h64c13.232,0,24-10.768,24-24S229.232,0,216,0h-72     c-26.472,0-48,21.528-48,48v80H22.936C10.288,128,0,138.288,0,150.936c0,1.08,0.08,2.16,0.232,3.248l19.28,134.944     C0.496,311.776,0,334.112,0,336c0,13.952,9.024,25.712,21.496,30.088C18.032,371.2,16,377.368,16,384     c0,8.528,3.4,16.232,8.856,21.976C10.056,414.16,0,429.92,0,448c0,26.472,21.528,48,48,48h240h16h192V328v-8v-24     C496,282.768,485.232,272,472,272z M424,168c0-4.408,3.592-8,8-8h16c4.408,0,8,3.592,8,8v104h-32V168z M376,168     c0-4.408,3.592-8,8-8h16c4.408,0,8,3.592,8,8v104h-32V168z M328,168c0-4.408,3.592-8,8-8h16c4.408,0,8,3.592,8,8v104h-32V168z      M200,16h16c4.408,0,8,3.592,8,8s-3.592,8-8,8h-16V16z M168,16h16v16h-16V16z M112,48c0-17.648,14.352-32,32-32h8v16     c-13.232,0-24,10.768-24,24v72h-16V48z M17.224,160l-1.152-8.056c-0.048-0.336-0.072-0.672-0.072-1.008     c0-3.824,3.112-6.936,6.936-6.936H96h48h73.064c3.824,0,6.936,3.112,6.936,6.936c0,0.336-0.024,0.672-0.064,0.984l-1.16,8.08H200     v16h20.488l-4.568,32H24.08l-4.568-32H184v-16H17.224z M213.64,224l-2.416,16.928C202.656,240.336,193.632,240,184,240h-16     c-69.712,0-110.432,16.232-134.296,35.352L26.368,224H213.64z M16,336c0-0.8,1.736-80,152-80h16c149.224,0,151.96,76.784,152,80     c0,8.824-7.176,16-16,16h-8h-8H48H32C23.176,352,16,344.824,16,336z M48,400c-8.824,0-16-7.176-16-16c0-8.824,7.176-16,16-16h256     c8.824,0,16,7.176,16,16c0,8.824-7.176,16-16,16H48z M270.608,416l-32.824,38.296L150.24,416H270.608z M304,480h-16H48     c-17.648,0-32-14.352-32-32s14.352-32,32-32h62.328l131.888,57.704L291.68,416H304c17.648,0,32,14.352,32,32S321.648,480,304,480     z M327.152,405.976C332.6,400.232,336,392.528,336,384c0-5.856-1.696-11.272-4.448-16H448v80h-96c0-5.616-1.024-10.984-2.8-16     H400v-16h-60.32C336.096,412.008,331.88,408.592,327.152,405.976z M480,320h-16v16h16v144H339.68     c4.152-4.624,7.408-10.032,9.52-16H464V352H347.552c2.752-4.728,4.448-10.144,4.448-16h96v-16h-98.712     c-2.6-8.896-7.736-20.44-17.752-32H472c4.408,0,8,3.584,8,8V320z" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="416" y="416" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="104" y="272" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="136" y="288" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="168" y="272" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="216" y="296" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="256" y="272" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
			<rect x="56" y="304" width="16" height="16" data-original="#000000" class="active-path" data-old_color="#F0B3B3" fill="#ffffff"/>
		</g>
	</g>
</g></g> </svg>
